management:
  endpoints:
    web:
      exposure:
        include: "*"              #To expose all endpoints
  endpoint:
    health:
      show-details: always         # To show all details in /health endpoint.
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  retry:
    retry-aspect-order: 2 # The higher the order value, the higher the priority
    instances:
      retryA:
        max-attempts: 3
        wait-duration: 5s
      retryB:
        max-attempts: 3
        wait-duration: 5s
        enable-exponential-backoff: true # wait-duration * (exponential-backoff-multiplier ^ (retry iteration count))
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.lang.RuntimeException
          - java.io.IOException
          - java.net.ConnectException
      retryD:
        max-attempts: 3
        wait-duration: 5s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.RestClientException
          - java.lang.RuntimeException
          - java.io.IOException
          - java.net.ConnectException
  circuitbreaker:
    circuit-breaker-aspect-order: 1 # The higher the order value, the higher the priority
    instances:
      circuitD:
        wait-duration-in-open-state: 1m
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-type: count-based
        sliding-window-size: 5 # consider a set of 5 consecutive events ( success or failures), to determine if the circuit breaker should transition to an OPEN or CLOSED state
        minimum-number-of-calls: 5 # if in 5 calls, 60% of the calls fail or are slow ( i.e at least 3 calls), then the circuit breaker would move to the OPEN state. Once the circuit breaker moves to the OPEN state, it would wait in this state for 1 minute before moving to a HALF-OPEN state
        slow-call-duration-threshold: 10s
        slow-call-rate-threshold: 60
        failure-rate-threshold: 60
  ratelimiter:
    instances:
      rl-instanceA:
        limit-refresh-period: 200ns
        limit-for-period: 40 #The Max number of calls that can be done in the time specified by limit-refresh-period
        timeout-duration: 3s # The max amount of time a call can last
  thread-pool-bulkhead:
    instances:
      tp-instanceA:
        queue-capacity: 2 #The number of calls which can be queued if the thread pool is saturated
        core-thread-pool-size: 4 #The Number of available threads in the Thread Pool.
  timelimiter:
    instances:
      tl-instanceA:
        timeout-duration: 2s # The max amount of time a call can last
        cancel-running-future: false #do not cancel the Running Completable Futures After TimeOut.